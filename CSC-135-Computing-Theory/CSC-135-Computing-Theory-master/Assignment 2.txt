Pawan Chandra
Pawan Khatri
CSC 135
Assignment 2

|----------------------- make6 -----------------------|

#lang racket

(define (make6 x y)(test(abs x)(abs y)))

(define (test x y)

  (if (and(> x 99999)(> y 99))(convert x y) (write "Invalid Input")))

(define (convert x y) (write (+(*(quotient x 1000) 1000) y)))


;Test

;(make6 123456 789)

;(make6 12345 789)

;(make6 1234567890 789)



|---------------------- concatL ----------------------|

#lang racket

(define (concatL x y)
(cond ((null? x) y)
      (else (cons(string-append(combine (car x))(combine (car y)))
             (concatL (cdr x) (cdr y)))))
)

(define (combine lst)
  (eval (cons string-append (map symbol->string lst))))

;Test
;(concatL '((E R) (G) (bb)) '((e) (r) (g)))
;(concatL '((a b)(c d)(d e)) '((f f f)(d e s)(v v v v)))
;(concatL '((a) (b)) '((c) (d)))



|--------------------- buildList ---------------------|

#lang racket

(define(buildList x A y B)(appendList(buildLeft x A) (buildRight y B)))
  (define(buildLeft x A)
  (if (= x 0)'()(cons A(buildLeft (- x 1) A))))

  (define(buildRight y B)
  (if (= y 0)'()(cons B(buildRight (- y 1) B))))

(define (appendList A B)
  (if (null? A) B
      (cons(car A) (appendList (cdr A) B))))

;Test
;( buildList 5 '() 3 'B )
;( buildList 3 'A 2 'C)
;( buildList 2 '(a b c ) 1 'Q)


|-------------------- DFA-Acceptor -------------------|

#lang racket

(define (Q0 x) (if(= x 0) Q1 Q0))
(define (Q1 x) (if(= x 1) Q2 P))
(define (Q2 x) Q2)
(define (P x) P)

(define (DFA-Acceptor x y z r)
  (if(null? x) ( if(equal? (member y (map eval z)) (map eval z))#t #f)
     (cond ((eq? y r) #f)
       (else (DFA-Acceptor (cdr x) (y (car x)) z r)))))
       
;test
;(DFA-Acceptor '(1 1 0 1 0) Q0 '(Q2) P)
;(DFA-Acceptor '(1 0 0 ) Q0 '(Q2) P)


|---------------------- selectN ----------------------|

#lang racket

(define (selectN x) (lambda (lst)(reverse (rm x(reverse lst)))))

(define (rm x y) (if (> x 0)(rm (- x 1)(cdr y)) y))

(define (First x) ((selectN 3) x))


;Test
;(First '(1 2 3 4 56 6))