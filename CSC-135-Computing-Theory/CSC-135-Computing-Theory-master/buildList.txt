buildList – Takes an integer N and a Scheme expression E1 (i.e. an atome or a list ) and an integer M and a Scheme Expression E2 and
returns a new list of length M+N where each element is the Expression E1 N times and E2 M times. For example:
( buildList 5 ‘() 3 ‘B ) will return the list ( ( ) ( ) ( ) ( ) ( ) B B B )
( buildList 3 ‘A 2 C) will return ( A A A C C )
( buildList 2 ‘(a b c ) 1 Q) will return ( ( a b c ) ( a b c ) Q)


;Pawan Chandra
;219493392

#lang racket
(define(buildList x A y B)(appendList(buildLeft x A) (buildRight y B)))

  (define(buildLeft x A)
  (if (= x 0)'()(cons A(buildLeft (- x 1) A))))

  (define(buildRight y B)
  (if (= y 0)'()(cons B(buildRight (- y 1) B))))

(define (appendList A B)
  (if (null? A) B
      (cons(car A) (appendList (cdr A) B))))


;Test

;( buildList 5 '() 3 'B )
;( buildList 3 'A 2 'C)
;( buildList 2 '(a b c ) 1 'Q)
