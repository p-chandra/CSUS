5. selectN - takes as input an integer N. It then builds and returns a "select" function
based on N. The "select" function that is produced (by your function selectN) would
have the property that it takes as input a list, and returns the same list with the last N
elements removed. For example, if selectN was called as follows:
(selectN 3)
a function would be produced that takes as input a list and returns the list with the last
3 elements removed from that list.
For example, if the original call had been made as follows:
(define First (selectN 3))
then the produced function C would behave as follows:
(First '(4 8 2 9 -1 13)) *** would return (4 8 2)
(First '(-2 3 -4 8 9 1 7)) *** would return (-2 3 -4 8)
Your task is just to write selectN.
Of course, selectN should work for ANY input integer, not just 3.



#lang racket
(define (selectN x) (lambda (lst)(reverse (removeN x(reverse lst)))))
(define (removeN x y) (if (> x 0) (removeN (- x 1)(cdr y)) y))
(define (First x) ((selectN 3) x))


Test
(First '(1 2 3 4 56 6))

-------------------------- another way -----------------------------
#lang racket
(define (selectN x)
  (lambda(list)
    (define(iter l i)
      (if(= i 0)l(iter (reverse (cdr (reverse l)))(- i 1))))
                      (iter list x)))

(define last (selectN 3))
(define result (last '(4 8 2 9 -1 13)))
(display result)
