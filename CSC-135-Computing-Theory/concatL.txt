2. concatL – takes two lists of lists of the same length and returns a list of that length
containing strings which are the concatenation of the strings at the same position in the
two list. For example, ( concatL '( (a b) (c d) (d e) ) '( (f f f) (d e s) (v v v v) ) will return ( “abfff”
“cddes” “devvvv” ). Note: you may want to define some auxiliary functions. You may
also use the built-in function “string-append” which takes two strings as arguments and
returns a string which is the concatenation of the two string arguments.

;Pawan Chandra
;219493392
;CSC 135

#lang racket
(define (concatL x y)
(cond ((null? x) y)
      (else (cons(string-append(combine (car x))(combine (car y)))
             (concatL (cdr x) (cdr y)))))
)

(define (combine lst)
  (eval (cons string-append (map symbol->string lst))))


Test
(concatL '((E R) (G) (bb)) '((e) (r) (g)))
(concatL '((a b)(c d)(d e)) '((f f f)(d e s)(v v v v)))
(concatL '((a) (b)) '((c) (d)))
